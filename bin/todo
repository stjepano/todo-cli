#!/usr/bin/env node

var TodoContainer = require("../lib");
var Table = require('tty-table');
var chalk = require('chalk');

/**
 * @param message
 */
var render = function (message) {
    console.log(message);
};

var todo = new TodoContainer(function (err) {
    if (err) {
        return render(err);
    }

    /**
     * @type {{closedTodoColor: string, todoTitle: string, set: set, get: get}}
     */
    var mainOptions = {
        closedTodoColor: '#ac6a5b',
        todoTitle: 'Opened todos',
        set: function (option, val) {
            this[option] = val;
        },
        get: function (option) {
            if (!mainOptions.hasOwnProperty(option)) return null;
            return this[option];
        }
    };

    /**
     * @param todoArray
     * @return {Array}
     */
    var getParsedTodos = function (todoArray) {
        var data = [], i, todo;
        for (i = 0; i < todoArray.length; ++i) {
            todo = todoArray[i];
            todo.todo = todo.state === 'CLOSED' ? chalk.hex(mainOptions.get('closedTodoColor')).dim(todo.todo) : todo.todo;
            todo.id = todo.state === 'CLOSED' ? chalk.hex(mainOptions.get('closedTodoColor')).dim(todo.id + 1) : todo.id + 1;
            data.push(
                [
                    todo.id,
                    todo.todo
                ]
            );
        }
        return data;
    };

    /**
     *
     * @param todoArray
     */
    var renderTable = function (todoArray) {
        if (!todoArray.length) {
            return render(chalk.red("No todos."));
        }

        var tableHeaderOptions = [{
            value: 'Id',
            paddingLeft: 1,
            paddingRight: 1,
            width: 5
        }, {
            value: mainOptions.get('todoTitle'),
            width: 80,
            paddingLeft: 1,
            paddingRight: 1,
            align: "left"
        }];

        var tableOptions = {
            borderStyle: 1,
            headerAlign: 'left'
        };

        render(Table(tableHeaderOptions, getParsedTodos(todoArray), tableOptions).render());
    };

    /**
     * @param processArguments
     * @return argument
     */
    var getTodoArgument = function (processArguments) {
        var argument = processArguments.length > 3 ? processArguments[3] : null;

        processArguments.forEach(function (segment, index) {
            if (index > 3) {
                argument += segment;
            }
        });

        return argument;
    };

    /**
     * @type {{create: create, list: list, opened: opened, closed: closed, reopen: reopen, help: help, close: close, clear: clear}}
     */
    var commands = {
        init: function() {
            if (todo.isInitialized()) {
                return render(chalk.hex('#84312c').dim("Todo already initialized in this directory."));
            }

            todo.init();
        },
        create: function () {
            if (!todo.isInitialized()) {
                return render(chalk.hex('#84312c').dim("Todo not initialized in this directory."));
            }
            if (!process.argv[3]) {
                return render(chalk.hex('#84312c').dim("Todo can't be empty! Ex: todo create \"This is my todo\" "));
            }

            todo.create(process.argv[3]);
            todo.save();
        },
        list: function (callback) {
            if (!todo.isInitialized()) {
                return render(chalk.hex('#84312c').dim("Todo not initialized in this directory."));
            }
            mainOptions.set('todoTitle', 'All todos');
            todo.filter({}, callback);
        },
        opened: function (callback) {
            if (!todo.isInitialized()) {
                return render(chalk.hex('#84312c').dim("Todo not initialized in this directory."));
            }
            todo.filter({"state": "OPEN"}, callback);
        },
        closed: function (callback) {
            if (!todo.isInitialized()) {
                return render(chalk.hex('#84312c').dim("Todo not initialized in this directory."));
            }
            mainOptions.set('todoTitle', 'Closed todos');
            var filter = JSON.parse("{ \"state\": \"CLOSED\" }");
            todo.filter(filter, callback);
        },
        reopen: function () {
            if (!todo.isInitialized()) {
                return render(chalk.hex('#84312c').dim("Todo not initialized in this directory."));
            }
            var todos = getTodoArgument(process.argv);
            if (todos === 'all') {
                todo.reopenAll();
            } else if (parseInt(todos, 10)) {
                todo.reopen(todos);
            } else {
                render(chalk.red('Pass in a todo id'));
            }

            todo.save();
        },
        help: function () {
            render(require("../help.js"));
        },
        close: function () {
            if (!todo.isInitialized()) {
                return render(chalk.hex('#84312c').dim("Todo not initialized in this directory."));
            }
            var todos = getTodoArgument(process.argv);

            if (todos === 'all') {
                todo.closeAll();
            } else if (parseInt(todos, 10)) {
                todo.close(todos);
            } else {
                render(chalk.red('Pass in a todo id'));
            }

            todo.save();
        },
        clear: function () {
            todo.clear();
        }
    };

    if (!commands.hasOwnProperty(process.argv[2]) && typeof (process.argv[2]) !== 'undefined') {
        process.argv[3] = process.argv[2];
        process.argv[2] = "create";
    } else if (!process.argv[2]) {
        process.argv[2] = "opened";
    }

    commands[process.argv[2]](function (err, res) {

        if (err) {
            return render(err);
        }

        if (typeof res === "string") {
            return render(res);
        }

        renderTable(res);
    });
});
